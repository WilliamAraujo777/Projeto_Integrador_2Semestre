/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.panels;

import DAO.ClienteDAO;
import DAO.EnderecoDAO;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.beans.*;
import util.Validador;
import view.CadastroCliente;

/**
 *
 * @author aroni
 */
public class TelaClientes extends javax.swing.JPanel {

    JFrame parent;

    /**
     * Creates new form Produtos
     *
     * @param parentFrame
     */
    public TelaClientes(JFrame parentFrame) {
        initComponents();
        atualizarTabela();
        this.parent = parentFrame;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();
        btnListar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnAdicionar = new javax.swing.JButton();
        btnPesquisaCPF = new javax.swing.JButton();
        fieldCPF = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(722, 500));

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPF", "Nome", "Sexo", "E-mail", "Número", "Data de nasc.", "Estado", "Cidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCliente.setColumnSelectionAllowed(true);
        tblCliente.setGridColor(new java.awt.Color(255, 255, 255));
        tblCliente.setShowGrid(false);
        jScrollPane3.setViewportView(tblCliente);
        tblCliente.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnEditar.setText("Alterar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnPesquisaCPF.setText("Pesquisar por CPF");
        btnPesquisaCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaCPFActionPerformed(evt);
            }
        });

        try {
            fieldCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#########-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel1.setText("CPF");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(btnPesquisaCPF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdicionar, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListar)
                    .addComponent(btnPesquisaCPF)
                    .addComponent(fieldCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAdicionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluir))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // TODO add your handling code here:
        CadastroCliente cadastro = new CadastroCliente(this.parent, this);
        cadastro.setVisible(true);
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        // Verifica se o usuário está procurando por algum processador em específico
        atualizarTabela();
    }//GEN-LAST:event_btnListarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int linhaSelecionada = tblCliente.getSelectedRow(); // Recebendo a linha selecionada
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        // Recebendo dados da linha selecionada
        if (linhaSelecionada >= 0) {
            try {
                DefaultTableModel modelo = (DefaultTableModel) tblCliente.getModel();
                String cpfCliente = (modelo.getValueAt(linhaSelecionada, 0).toString());
                String nomeCliente = (modelo.getValueAt(linhaSelecionada, 1).toString());
                String sexoCliente = (modelo.getValueAt(linhaSelecionada, 2).toString());
                String emailCliente = (modelo.getValueAt(linhaSelecionada, 3).toString());
                String numeroCliente = (modelo.getValueAt(linhaSelecionada, 4).toString());
                String dtNascimento = (modelo.getValueAt(linhaSelecionada, 5).toString());

                char sexoChar = sexoCliente.charAt(0);
                Date dataDate = formato.parse(dtNascimento);

                // Recupere os dados de endereço do banco de dados com base no CPF do cliente selecionado
                Endereco endereco = EnderecoDAO.obterEnderecoPorCPF(cpfCliente);

                Cliente alterarCliente = new Cliente(cpfCliente, nomeCliente, sexoChar, emailCliente, numeroCliente, dataDate, endereco); // Passando os dados para o construtor que os modifica
                CadastroCliente cadastro = new CadastroCliente(alterarCliente, this.parent, this); // Chama a tela de cadastro no modo de alteração
                cadastro.setVisible(true);
            } catch (ParseException | ClassNotFoundException | SQLException ex) {
                Logger.getLogger(TelaClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha!");
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int linhaSelecionada = tblCliente.getSelectedRow(); // Recebe a linha do usuário

        // Pega os dados da linha selecionada
        if (linhaSelecionada >= 0) {
            DefaultTableModel modelo = (DefaultTableModel) tblCliente.getModel();
            String cpf = (modelo.getValueAt(linhaSelecionada, 0).toString());

            //Chamar a DAO para excluir
            boolean retorno = ClienteDAO.excluir(cpf);
            if (retorno) {
                JOptionPane.showMessageDialog(this, "Sucesso!");
                atualizarTabela();
            } else {
                JOptionPane.showMessageDialog(this, "Falha!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha!");
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnPesquisaCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaCPFActionPerformed
        SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
        fieldCPF.setBorder(javax.swing.BorderFactory.createLineBorder(Color.GRAY));
        if (!validaCampos()) {
            return;
        }
        try {
            String cpfCliente = fieldCPF.getText().replace("-", "");
            Cliente retorno = ClienteDAO.bucarPorCPF(cpfCliente); // Filtrando produtos pelo nome;

            if (retorno != null) {
                DefaultTableModel modelo = (DefaultTableModel) tblCliente.getModel();
                modelo.setRowCount(0);

                modelo.addRow(new String[]{
                    String.valueOf(retorno.getCpfCliente()),
                    String.valueOf(retorno.getNomeCliente()),
                    String.valueOf(retorno.getSexoCliente()),
                    String.valueOf(retorno.getEmailCliente()),
                    String.valueOf(retorno.getNumeroCliente()),
                     formatoData.format(retorno.getDtNascimento()),
                    String.valueOf(retorno.getEndereco().getEstado()),
                    String.valueOf(retorno.getEndereco().getCidade())
                });
            } else {
                JOptionPane.showMessageDialog(this, "CPF não localizado no banco");
            }
        } catch (ParseException ex) {
            Logger.getLogger(TelaClientes.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPesquisaCPFActionPerformed
    
    
    private boolean validaCampos() {
        Validador valida = new Validador();
        try {
            fieldCPF = (JFormattedTextField) valida.validaTextField(fieldCPF);
            return true;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Verifique se os campos estão preenchidos");
            return false;
        }
    }
    
    
    

    public void atualizarTabela() {
        SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
        try {
            // Chama a DAO para listar as notas
            ArrayList<Cliente> cliente = ClienteDAO.listar();

            DefaultTableModel modelo = (DefaultTableModel) tblCliente.getModel();

            // Limpa as linhas da tabela
            modelo.setRowCount(0);

            // Para cada item na lista de retorno, adiciono uma linha à tabela
            for (Cliente item : cliente) {
                modelo.addRow(new String[]{
                    String.valueOf(item.getCpfCliente()),
                    String.valueOf(item.getNomeCliente()),
                    String.valueOf(item.getSexoCliente()),
                    String.valueOf(item.getEmailCliente()),
                    String.valueOf(item.getNumeroCliente()),
                    formatoData.format(item.getDtNascimento()),
                    String.valueOf(item.getEndereco().getEstado()),
                    String.valueOf(item.getEndereco().getCidade())
                });
            }
        } catch (ClassNotFoundException | SQLException | ParseException ex) {
            Logger.getLogger(TelaClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnPesquisaCPF;
    private javax.swing.JFormattedTextField fieldCPF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblCliente;
    // End of variables declaration//GEN-END:variables
}
